enum AppHealthApplicationType {
    FRONTEND
    SERVER
    MOBILE
    EMBEDDED
}


type AppHealthApplication
{
    id: ID!
    technicalSolutionId: ID!
    technicalSolution: AppHealthTechnicalSolution
    name: GraphQLString!
    description: GraphQLString
    businessImpact: GraphQLString
    type: AppHealthApplicationType!
    releaseDate: GraphQLISODateTime!
    architectureDiagram: GraphQLString!
    hasTenants: GraphQLBoolean!
    hasLicensing: GraphQLBoolean!
    costLicensesPerYear: GraphQLInt!
    requestsPerDay: GraphQLInt!
    views: ID!
    applicationView: AppHealthApplicationView
    authentications: ID!
    applicationAuthentication: AppHealthApplicationAuthentication
    authorizations: ID!
    applicationAuthorization: AppHealthApplicationAuthorization
    languages: ID!
    applicationLanguage: AppHealthApplicationLanguage
    infrastructureServices: ID!
    applicationInfrastructureService: AppHealthApplicationInfrastructureService
    databases: ID!
    applicationDatabase: AppHealthApplicationDatabase
    apis: ID!
    applicationApi: AppHealthApplicationApi
    integrations: ID!
    applicationIntegration: AppHealthApplicationIntegration
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input AppHealthCreateApplicationInput
{
    id: ID!
    technicalSolutionId: ID!
    name: GraphQLString!
    description: GraphQLString
    businessImpact: GraphQLString
    type: AppHealthApplicationType!
    releaseDate: GraphQLISODateTime!
    architectureDiagram: GraphQLString!
    hasTenants: GraphQLBoolean!
    hasLicensing: GraphQLBoolean!
    costLicensesPerYear: GraphQLInt!
    requestsPerDay: GraphQLInt!
    views: ID!
    authentications: ID!
    authorizations: ID!
    languages: ID!
    infrastructureServices: ID!
    databases: ID!
    apis: ID!
    integrations: ID!
}

input AppHealthUpdateApplicationByIdInput
{
    id: ID!
    technicalSolutionId: ID
    name: GraphQLString
    description: GraphQLString
    businessImpact: GraphQLString
    type: AppHealthApplicationType
    releaseDate: GraphQLISODateTime
    architectureDiagram: GraphQLString
    hasTenants: GraphQLBoolean
    hasLicensing: GraphQLBoolean
    costLicensesPerYear: GraphQLInt
    requestsPerDay: GraphQLInt
    views: ID
    authentications: ID
    authorizations: ID
    languages: ID
    infrastructureServices: ID
    databases: ID
    apis: ID
    integrations: ID
}

input AppHealthUpdateApplicationsInput
{
    id: ID
    technicalSolutionId: ID
    name: GraphQLString
    description: GraphQLString
    businessImpact: GraphQLString
    type: AppHealthApplicationType
    releaseDate: GraphQLISODateTime
    architectureDiagram: GraphQLString
    hasTenants: GraphQLBoolean
    hasLicensing: GraphQLBoolean
    costLicensesPerYear: GraphQLInt
    requestsPerDay: GraphQLInt
    views: ID
    authentications: ID
    authorizations: ID
    languages: ID
    infrastructureServices: ID
    databases: ID
    apis: ID
    integrations: ID
}

type Query
{
    appHealthFindApplication(
        query: QueryStatement
        constraint: QueryStatement
    ): AppHealthApplication

    appHealthFindApplicationById(
        id: ID
        constraint: QueryStatement
    ): AppHealthApplication

    appHealthGetApplications(
        query: QueryStatement
        constraint: QueryStatement
    ): [AppHealthApplication]!

    appHealthPaginateApplications(
        query: QueryStatement
        constraint: QueryStatement
    ): Pagination!

}

type Mutation
{
    appHealthCreateApplication(
        payload: AppHealthCreateApplicationInput!
    ): AppHealthApplication

    appHealthCreateApplications(
        payload: [AppHealthCreateApplicationInput]!
    ): Boolean!

    appHealthUpdateApplicationById(
        payload: AppHealthUpdateApplicationByIdInput!
        constraint: QueryStatement
    ): AppHealthApplication

    appHealthUpdateApplications(
        payload: AppHealthUpdateApplicationsInput!
        query: QueryStatement
        constraint: QueryStatement
    ): [AppHealthApplication]!

    appHealthUpsertApplication(
        payload: AppHealthUpdateApplicationByIdInput!
    ): AppHealthApplication

    appHealthDeleteApplicationById(
        id: ID!
        constraint: QueryStatement
    ): AppHealthApplication

    appHealthDeleteApplications(
        query: QueryStatement
        constraint: QueryStatement
    ): [AppHealthApplication]!

}